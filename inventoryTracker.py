import pickle

# Create external file for use by program
# Name, Type, SKU, Price, Quantity
inven = [['Rye Bread', 'Bread', 101, 1.99, 10], ['Wheat Bread', 'Bread', 102, 1.99, 15], ['Small Eggs', 'Eggs', 201, 3.49, 2], ['Large Eggs', 'Eggs', 202, 3.99, 5], ['Chocolate Milk', 'Milk', 301, .99, 20]]

f = open("inventory.txt", 'wb')
pickle.dump(inven, f)
f.close()


# ------------- #


def main():
    inventory = openFile()
    menuOptions(inventory)

def openFile():
    f = open("inventory.txt", 'rb')
    inventory = pickle.load(f)
    f.close()

    return inventory

# Select options menu
def menuOptions(inventory):
    print("Select an option to continue.")
    print(" P = Products\n S = Search\n A = Add New Product\n U = Update/Remove Product\n O = Overview\n Q = Quit\n")

    action = str(input("Enter P, S, A, U, O, or Q: "))
    action = action.title()
    print("Enter P, S, A, U, O, or Q: {}\n".format(action))

    menuSwitch(inventory, action)
    
# Menu selection switchboard
def menuSwitch(inventory, action):
    if action == 'P':
        invenList(inventory)
    
    elif action == 'S':
        print("Choose from the following search options.")
        print(" N = Name\n S = SKU\n T = Type\n")

        choice = str(input("Enter N, S, or T: "))
        choice = choice.title()
        print("Enter N, S, or T: {}\n".format(choice))

        if choice == 'N':
            nameSearch(inventory)

        elif choice == 'S':
            skuSearch(inventory)

        elif choice == 'T':
            typeSearch(inventory)

        else:
            menuOptions(inventory)
    
    elif action == 'A':
        addProduct(inventory)

    elif action == 'U':
        print("Choose either to update or remove product.")
        print(" Q = Update Quantity\n P = Update Price\n R = Remove\n")

        choice = str(input("Enter Q, P, or R: "))
        choice = choice.title()
        print("Enter Q, P, or R: {}\n".format(choice))

        if choice == 'Q':
            updateQuantity(inventory)
        
        elif choice == 'P':
            updatePrice(inventory)

        elif choice == 'R':
            removeProduct(inventory)

        else:
            menuOptions(inventory)


    elif action == 'O':
        overview(inventory)

    elif action == 'Q':
        endProgram(inventory)

    else:
        menuOptions(inventory)

# Search by name
def nameSearch(inventory):
    l = len(inventory)

    print("Enter the name of a product: ")

    product = str(input("Product: "))
    product = product.title()
    print("Product: {}".format(product))

    for i in range(l):
        if product == inventory[i][0]:
            selection = inventory[i]
            trigger = 1
            searchDisplay(inventory, selection, trigger)

    else:
        print("Product does not exist.\n")
        menuOptions(inventory)


# Search by SKU
def skuSearch(inventory):
    l = len(inventory)

    print("Enter the SKU for a product: ")

    sku = int(input("SKU: "))
    print("SKU: {}".format(sku))

    for i in range(l):
        if sku == inventory[i][2]:
            selection = inventory[i]
            trigger = 1
            searchDisplay(inventory, selection, trigger)

    else:
        print("SKU does not exist.\n")
        menuOptions(inventory)

# Search by type
def typeSearch(inventory):
    l = len(inventory)
    selection = []

    print("Enter the type of a product: \n")

    prodType = str(input("Type: "))
    prodType = prodType.title()
    print("Type: {}\n".format(prodType))

    for i in range(l):
        trigger = -1
        if prodType == inventory[i][1]:
            selection.append(inventory[i])
            trigger += 1

    if len(selection) > 0:
        searchDisplay(inventory, selection, trigger)

    else:
        print("Type does not exist.\n")
        menuOptions(inventory)

# Display the search results
def searchDisplay(inventory, selection, trigger):
    l = len(selection)
    print("\nName\t\t Type\t SKU\t Price\t Quantity")

    if trigger == 1:
        print("{0}\t {1}\t {2}\t {3:.2f}\t {4}\n".format(selection[0], selection[1], selection[2], selection[3], selection[4]))
    else:
        for i in range(l):
            print("{0}\t {1}\t {2}\t {3:.2f}\t {4}".format(selection[i][0], selection[i][1], selection[i][2], selection[i][3], selection[i][4]))
        print(" \n")

    startOver(inventory)

# Add new product (SKU autogenerated)
def addProduct(inventory):
    l = len(inventory)

    name = str(input("Enter product name: "))
    name = name.title()
    print("Enter product name: {}".format(name))

    prodType = str(input("Enter product type: "))
    prodType = prodType.title()
    print("Enter product type: {}".format(prodType))

    price = float(input("Enter price: "))
    print("Enter price: {:.2f}".format(price))

    quantity = int(input("Enter quantity: "))
    print("Enter quantity: {}".format(quantity))

    if prodType == 'Bread':
        cursku = 0
        for i in range(l):
            if cursku < inventory[i][2]:
                cursku = inventory[i][2]
        sku = cursku + 1

    elif prodType == 'Eggs':
        cursku = 0
        for i in range(l):
            if cursku < inventory[i][2]:
                cursku = inventory[i][2]
        sku = cursku + 1

    elif prodType == 'Milk':
        cursku = 0
        for i in range(l):
            if cursku < inventory[i][2]:
                cursku = inventory[i][2]
        sku = cursku + 1

    else:
        sku = (len(name) - 2) * (len(prodType) - 1) + 7

    print("SKU: {}\n".format(sku))

    new = [name, prodType, sku, price, quantity]

    inventory.append(new)

    print("Product added.\n")
    
    startOver(inventory)

# Update inventory
def updateQuantity(inventory):
    l = len(inventory)
    prod = ''
    typ = ''
    sku = 0
    price = 0.0
    quantity = 0
    position = 0

    product = str(input("Enter product name to be updated: "))
    product = product.title()
    print("Enter product name to be updated: {}\n".format(product))

    for i in range(l):
        if product == inventory[i][0]:
            prod = inventory[i][0]
            typ = inventory[i][1]
            sku = inventory[i][2]
            price = inventory[i][3]
            quantity = inventory[i][4]
        position += 1

    print("Product: {0}\nType: {1}\nSKU: {2}\nPrice: {3:.2f}\nQuantity: {4}".format(prod, typ, sku, price, quantity))

    newQuantity = int(input("Enter the updated quantity: "))
    print("Enter the updated quantity {}".format(newQuantity))

    correct = str(input("Is the new quantity correct (Y/N)?: "))
    correct = correct.title()
    print("Is the new quantity correct (Y/N)?: {}\n".format(correct))

    if correct == 'Y':
        for i in inventory:
            if i[0] == product:
                i[4] = newQuantity

    else:
        print("No action taken.\n")
        menuOptions(inventory)

    print("Product quantity updated.\n")
    startOver(inventory)

# Update price
def updatePrice(inventory):
    l = len(inventory)
    prod = ''
    typ = ''
    sku = 0
    price = 0.0
    quantity = 0
    position = 0

    product = str(input("Enter product name to be updated: "))
    product = product.title()
    print("Enter product name to be updated: {}\n".format(product))

    for i in range(l):
        if product == inventory[i][0]:
            prod = inventory[i][0]
            typ = inventory[i][1]
            sku = inventory[i][2]
            price = inventory[i][3]
            quantity = inventory[i][4]
        position += 1

    print("Product: {0}\nType: {1}\nSKU: {2}\nPrice: {3:.2f}\nQuantity: {4}".format(prod, typ, sku, price, quantity))

    newPrice = float(input("Enter the updated price: "))
    print("Enter the updated price {:.2f}".format(newPrice))

    correct = str(input("Is the new price correct (Y/N)?: "))
    correct = correct.title()
    print("Is the new price correct (Y/N)?: {}\n".format(correct))

    if correct == 'Y':
        for i in inventory:
            if i[0] == product:
                i[3] = newPrice
    else:
        print("No action taken.\n")
        menuOptions(inventory)

    print("Price updated.\n")
    startOver(inventory)

# Remove product
def removeProduct(inventory):
    l = len(inventory)
    prod = ''
    typ = ''
    sku = 0
    price = 0.0
    quantity = 0
    position = 0

    product = str(input("Enter product name to be removed: "))
    product = product.title()
    print("Enter product name to be removed: {}\n".format(product))

    for i in range(l):
        if product == inventory[i][0]:
            prod = inventory[i][0]
            typ = inventory[i][1]
            sku = inventory[i][2]
            price = inventory[i][3]
            quantity = inventory[i][4]
        position += 1

    print("Product: {0}\nType: {1}\nSKU: {2}\nPrice: {3:.2f}\nQuantity: {4}".format(prod, typ, sku, price, quantity))

    correct = str(input("Is the product to remove correct (Y/N)?: "))
    correct = correct.title()
    print("Is the product to remove correct (Y/N)?: {}\n".format(correct))

    temp = [prod, typ, sku, price, quantity]

    if correct == 'Y':
        print("Product removed.\n")
        inventory.remove(temp)         

    else:
        print("No action taken.\n")
        menuOptions(inventory)

    startOver(inventory)

# View inventory list
def invenList(inventory):
    l = len(inventory)
    items = []

    for i in range(l):
        items.append(inventory[i][0])

    print(items, "\n")

    startOver(inventory)

# View stats
def overview(inventory):
    l = len(inventory)
    types = []
    invenTypes = []
    prodNum = 0
    invenCost = 0.0

    for i in range(l):
        prodNum += 1
        invenCost += (inventory[i][3] * inventory[i][4])

    for i in range(l):
        invenTypes.append(inventory[i][1])

    invenTemp = set(invenTypes)

    for i in invenTemp:
        types.append(i)

    prodTypes = len(types)

    print("{} - Products".format(prodNum))
    print("{} - Product Types".format(prodTypes))
    print("Inventory Cost: ${:,.2f}\n".format(invenCost))

    startOver(inventory)

# Continue options
def startOver(inventory):
    print("Would you like to return to the main menu or quit?")
    print(" M = Main Menu\n Q = Quit\n")
    choice = str(input('M or Q: '))
    choice = choice.title()
    print('M or Q: {}\n'.format(choice))

    if choice == 'Q':
        endProgram(inventory)

    elif choice == 'M':
        menuOptions(inventory)

    else:
        menuOptions(inventory)

# Quit program dipslay / update external file
def endProgram(inventory):
    print("Saving changes...")

    f = open("inventory.txt", 'wb')
    pickle.dump(inventory, f)
    f.close()

    print("End of process.")
    quit()



main()
